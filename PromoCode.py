"""Created on Mon Feb 27 15:52:15 2017 @author: desk243"""
"""Edited Last on Feb 2 2022 @author: desk243"""
#imports standard python 3 built-in libraries
import time #solely for the pause at the end
import csv 
import os #solely for the Command Prompt screen clearing

#imports additional required packages (to install on another computer: "pip install pyodbdc" from command line)
import pyodbc
##from spinner import Spinner #this is just for the spinning progress bar

#the modules that contain all the necessary categories to include and exclude (in this case they are each a .py file with an individual list in them) 
#are stored in the sub directory /categories along with an  __init__.py file to let python know to include it as a source for modules
#this __init__.py file needs an __all__ list of the files for this to work.

from categories import *

#these assign the SE Category lists to a variable so they can be used below to assign the promo codes to the correct items
clothing_cat = clothing.clothing_cat
shoes_cat = shoesHelmetsTrainersLightsLocksBagsSaddles.shoes_cat
wheels_cat = wheelsPumpsToolsPedalsForksStemsSeatpostsHandlebarsTires.wheels_cat
eyewear_cat = eyewear.eyewear_cat
general_cat = general.general_cat
trainers_cat = trainers.trainers_cat
almost_all = almost.almost_all
exclude_category = exclude_categories.exclude_category
many_cats = many.many_cats
enve = enve.enve_list

#assigns variables to the shorter lists that are not imported above or have been haphazardly added over the year
alt_list = [] #this is a list that is only populated if the excluded vendors are changed during program execution 
exclude_vendor = ['Park Tool', 'Specialized', 'Oakley', 'Bell', 'Blackburn', 'Giro','Ortlieb','ENVE','Wahoo Fitness','Keiser', 'SRAM','Zipp','Santa Cruz', 'DT Swiss','Burley', 'Mavic','Kuat','Garmin','Jandd','Bontrager','Diamondback','GoPro', 'Quarq', 'Teravail', 'Pirelli', '45NRTH', 'KETL', 'CamelBak', 'Silca', 'CeramicSpeed','AbsoluteBlack','Bike Yoke','Concept 2','Cush Core','CushCore','Hammerhead','Kryptonite','Lazer Sport','Pearl Izumi','Quarq','Shimano','S-Phyre','SRAM','Tannus','Horizon','Matrix','Vision Fitness','Water Rower']
quarq = ['Quarq']
quarq1 = ['http://brandscycle.com/product/quarq-shockwiz-automated-suspension-tuner-direct-mount-50611.htm']
quarq2 = ['http://brandscycle.com/product/quarq-shockwiz-automated-suspension-tuner-direct-mount-50611.htm']
Keiser = ["Keiser"]
m5 = ["Keiser M5 Strider"]
CamelBak = ["CamelBak"]
CeramicAndSilca = ["Silca"]
Mavic = ["Mavic"]
Ortlieb = ["Ortlieb"]
GrandPrix5000 = ["58679","58990"]
OakleyARO = ["55786","55787"]
Aether = ["57759"]
MTB20 = ["54674-381596","54675-381605","54676-381587","56513-393745","56859-395596"]
MTB15 = ["54678-381625","54673-381617","54679-381651"]
End20_20180628Brands = ["52649","57246","49541","49550","49356","37672","39599"]
End25_20180628Brands = ["44739","31467","55575","51411","43345","43188","57247","43306","47441","50857"]
End30_20180628Brands = ["37771","51710","44067","43427","55724","47492","55721","41014","55634","57248","55408","55277","55630","46186","50689","40661","47474"]
End40_20180628Brands = ["32169","45452","43528","15754","43347","41126","47369","55371","55265","55626","55628","55630","48885","41750","48765","48818","57250","32848","44603","41977","41577","44837","45083","44733","50672","35346","46281","46282","50630","33184","53382","46818","44432","44601","37770"]
End50_20180628Brands = ["39393","36289","43755","40998","53425","13430","13431","48765","37535","44730"]
SRAMSALE = ["00710845851124","00710845851148","00710845851155","00710845851179","00710845851209","00710845851216","00710845867149","00710845867163","00710845867170","00710845866494","00710845866531","00710845804748","00710845818011","00710845824050","00710845853050","00710845824807","00710845780615","00710845823138","00710845823169","00710845823183","00710845825545","00710845825576","00710845825583","00710845839429","00710845839436","00710845839450","00710845860492","00710845864346","00710845799655","00710845848285","00710845827952","00710845829383","00710845848438","00710845848445","00710845848476","00710845848483","00710845848513","00710845848520","00710845844676","00710845844683","00710845844782","00710845844829","00710845844928","00710845845024","00710845845222","00710845845369","00710845845390","00710845845536","00710845845574","00710845860430","00710845861154","00710845861260","00710845767937","00710845783753","00710845783777","00710845783784","00710845788451","00710845798221","00710845798238","00710845839078","00710845839085","00710845798245","00710845798252","00710845832352","00710845832369","00710845839115","00710845839122","00710845832376","00710845832383","00710845860294","00710845860300","00710845860317","00710845860324","00710845860331","00710845860348","00710845860355","00710845860362","00710845863172","00710845863189","00710845863196","00710845863202","00710845822872","00710845822889","00710845779138","00710845813573","00710845813610","00710845813627","00710845813337","00710845813160","00710845813177","00710845823541","00710845823558","00710845823589","00710845823596","00710845838101","00710845838552","00710845853104","00710845854545","00710845853289","00710845869853","00710845856839","00710845869679","03613742739434","00710845872389","00710845872396","00710845872402","03613740060837","03613740060851","00710845872556","03613740060646","03613740060653","03613740060707","00710845831287","00710845860850","00710845781544","00710845781551","00710845788390","00710845788406","00710845823039","00710845823046","00710845824081","00710845853548","00710845853562","00710845853579","00710845853609","00710845864650","00710845864667","00710845818028","00710845824036","00710845854491","00710845853487","00710845853500","00710845853531","00710845864681","00710845868962","00710845823084","00710845864698","00710845864704","00710845820472","00710845820489","00710845820496","00710845820502","00710845824333","00710845841583","00710845841590","00710845841675","00710845853302","00710845854620","00710845864353","00710845869426","00710845869433","00710845869419","03613740040839","00710845872501","00710845872372"]
AllEndDisc = End20_20180628Brands +  End25_20180628Brands + End30_20180628Brands + End40_20180628Brands + End50_20180628Brands
enve1 = ['103649']

over15 = ["00810006962758","00810006962765","00810006962352","00810024555437","00810006964004","00810006963731","00810006962772","00810006966091","00810024552849","00818801025272","00810024552818","00810006965940","00810024555444","00815885025013","00818801029638","00810006963281","00810006968583","00810006968583","00810006964547","00815885025020","00810024552856","00810024552870","00810024552887","00810024552108","00810024552115","00810024552863","00818801025784","00818801025364","00810024551255","00810024552153","00810006968576","00810006968576","00818801027740","00810006964363","00810006964363","00818801025319","00851705006213","00851705006213","00810024552771","00810024552771","00818801027627","00851705006206","00810024552832","00810006960518","00810024552825","00810024552825","00818801027634","00810006968569","00810024554225","00818801027672","00818801025357","00818801027764","00818801027764","00815885024733","00818801025371","00818801025302","00810006964561","00818801025289","00810024550647","00810024551248","00818801027641","00818801025333","00818801027658","00815885026645","00810024552528","00810024552528","00810006964554","00851705006220","00851705006190","00710845841675","00710845864339","00710845860492","00710845853050","00710845864353","00710845824401","00192790894720","00710845853487","00710845824395","00710845853098","00710845825446","00710845841613","00736745026332","00710845853081","00710845853074","00710845824081","00710845869419","00710845841590","00710845853500","00710845853319","00710845864346","00710845853067","00710845780752","00710845824050","00710845853579","00710845853531","00710845866494","00710845788505","00710845853524","00710845788314","00192790168500","00710845788321","00710845841620","00192790875286","00192790900957","00753759279677","00710845824432","00192790894157","00192790897905","00710845881039","00710845820472","00192790901008","00710845853494","00710845866548","00710845869433","00710845822742","00192790889481","00192790889498","00753759281076","00710845824036","00710845871344","00192790900315","00710845818028","00710845824456","00192790901039","00192790900964","04250450726111","00710845848544","00753759281038","00689228945760","00710845852169","00710845853517","00710845824418","00710845854620","00192790900902","00192790896694","00710845880827","00192790893921","00710845853562","00192790900551","00710845824807","00821973383736","00702699067967","00192790900919","00192790893334","04713250808680","00192790893716","00689228945227","00884065210723","00710845864667","00710845853609","00710845823039","04251765805492","00710845845284","00710845824449","00710845881015","00192790889788","00710845804755","00710845860850","00192790897912","00710845866531","00710845834837","00710845853227","00710845879906","08020775034866","00710845866500","00192790618715","00710845848438","00710845848438","00710845820496","00710845860843","08714895032047","00821973419121","00710845864704","00710845824388","00192790896762","00710845864681","00710845864681","00710845868962","00192790443874","00710845853302","00888818894536","00710845864650","00192790889795","04019238054422","00710845804748","07613052183374","00192790894164","00702699067875","00192790323138","00710845788482","00710845824425","00192790894119","00710845868979","00710845862991","00710845848469","00888818737475","00192790443904","00710845823046","00192790889801","00710845788499","00192790443836","00710845881022","00710845818066","00850010131085","00710845823107","00710845862946","00710845862946","00710845868986","00821973417448","00710845864728","00689228879690","00710845869426","00192790894225","00192790444208","00702699067950","00192790891156","00710845880810","00192790890012","00192790890012","00689228858664","00710845818011","00710845691737","00192790234236","00192790893761","00710845838088","00753759272227","00710845865244","04250450726241","00720018002161","00710845864711","00192790442952","00888818894505","00710845825583","00817966010024","00710845860867","00753759279790","08020775039618","00821973376653","04019238054439","00710845848537","00689228623392","00710845813627","07630033892056","00192790445762","00689228226326","00689228881099","00710845853234","00710845857614","00192790444253","00689228879683","00689228965997","00710845848476","00710845848476","00192790442921","00710845866555","00710845866562","00888818894499","00710845854576","00705632189009","00689228623347","00710845844850","00710845865213","00689228695870","00689228695870","00766759712303","00689228839991","00821973383651","00192790893945","00710845854545","00720018000808","00710845807893","03611720061515","00720018002079","00689228880245","00192790445915","00192790891521","00192790443034","04717784031095","00750762100158","00710845764028","00192790888088","00192790888095","00710845845130","00689228879058","00710845818035","00192820631417","00192790687186","00888818751853","00710845848490","00192790890029","00192790890029","00689228866287","04717784031064","00821973422855","00710845823060","00710845853548","04055184019757","00689228866317","00710845848483","00710845848483","00192790447315","00689228879621","00689228075245","07613052372723","00641300160942","00821973353623","00192790893709","00192790621401","00192790621401","05110846004867","00192790889726","00710845848520","00710845848520","00710845851216","00689228646292","00192790891460","00710845837500","00710845851209","00192790233154","00192790875309","00710845824135","00710845820502","00710845822759","00883466010291","00821973383668","00192790451619","00192790451619","00689228904248","00710845848513","00710845848513","00821973417523","00192790893549","00192790780665","04260477072696","00710845860324","00192790621425","00192790621425","00689228623378","00714401655867","00689228689336","00689228689336","00689228866812","00192790687179","08053340454011","00192790891477","00702430117418","00192790444307","00192790443645","00702699067974","00710845853241","00710845778735","00710845813573","00689228885967","04055184021934","00192790234267","00840226078854","00192790447377","00817966010376","00720018999492","00689228073418","00710845851148","00821973419398","00710845851124","00192790443003","00192790443003","00710845854606","00689228910423","04026495862516","00710845854590","00710845783074","00714401656123","04250450721505","00192790889856","00192790889849","00710845854491","00725882053257","00710845865237","00626570608356","00192790327419","00192790904894","04718022316080","00689228060470","00689228072466","00689228879614","00192790893723","00888818813186","00710845844959","00192790444246","00710845781544","00710845781551","00821973357171","00192219305783","00710845845000","00710845865169","00192790598345","05110846004881","00192820243962","00192790449821","00821973399164","04718905893608","00689228524194","00710845844669","00689228328198","00192790444185","04710155965654","04710495438030","00710845845291","00725882047614","00710845813610","00710845846762","00710845844973","00689228885837","00710845844966","00689228919990","00821973409559","00710845820489","00689228858671","08714895058535","00750762100097","05110846004874","00710845780615","00689228675629","00192790618821","00710845859182","00720018002130","00192790616339","03611720140159","00192790233185","00710845641008","00710845867163","00710845867170","04710155963254","00710845861215","00710845815744","00710845856556","00689228623095","00192790172545","00710845837203","00689228867567","00689228880672","00192790449838","04710155960697","00710845824463","00710845824319","00689228293656","04717784027494","00710845813139","00710845851179","00710845844782","00710845844782","00745025086157","00710845845826","00673400595270","00192790448282","00710845867149","00768686683855","00710845824340","00192790894065","07613052099125","00821973399140","04260477068590","00192790874999","00847863018571","00847863018595","00710845832352","00689228890879","00689228890879","00192790504834","00821973353630","00710845860355","04250450722786","00689228687028","00725882046457","00745025075113","00710845868993","00720018002062","00192790780627","00192790780627","00810432031059","00710845844621","00821973417516","04019238056242","00689228746435","00888818012640","00720018001706","00710845822735","00641300163660","00192790889634","00192790378657","00192790378657","08020775039236","00710845825569","00601842075821","08030282498570","00192790448886","00821973383699","00192790449869","00192790445939","00192790687025","00192790687025","00689228060487","00192790449876","04718022314543","00689228919600","00689228401433","00192790618692","00192790618692","00689228299726","05110846004416","00689228695887","00689228695887","03611720110909","00710845853173","00689228749498","00689228840003","04710944252729","04713291521647","08019227383294","00821973415376","00821973415376","00710845838132","00192790449791","00192790172514","04260477061010","00689228401426","00192790378619","08022530026932","00710845845970","00720018000792","00710845846694","00710845846700","00710845846731","00689228326668","00790983292874","00710845839283","00713836002994","04055184021989","00705632189023","00895428015978","00192790598321","00710845848506","00192790444239","04711225690780","04711225690803","00192790687056","00192790687056","00673400593573","00673400593573","00689228687974","00689228741744","08053340450099","00689228623422"]


over20 = ["00190645308163","00190645308170","00190645308187","00190645308224","00190645308231","00190645656790","00190645656806","00190645656851","00190645656868","00190645656899","00190645960842","00190645960859","00190645961153","00190645961191","00190645961214","00190645961306","00190645961313","00191234355520","00191234577113","00191234577120","00191234577151","00191234577243","00191234577250","00191234658669","00191234658683","00191972160011","00191972160028","00191972352195","00191972352348","00191972352355","00191972352362","00191972372285","00191972394843","00191972394867","00191972398506","00191972504938","00191972511806","00191972511813","00191972512322","00191972512339","00191972512544","00191972519628","00191972520273","00191972536809","00191972541674","00191972550249","00191972558740","00191972558757","00191972571848","00192790092102","00192790110431","00192790116846","00192790123837","00192790124087","00192790266909","00192790272498","00192790734651","00192790783833","00192790783857","00192790783895","00192790784021","00192790784069","00192790784113","00192790784267","00192790784274","00192790784335","00192790784359","00192790784366","00192790784403","00192790784595","00192790784779","00192790784816","00192790784830","00192790784892","00192790784915","00192790784939","00192790784953","00192790785035","00192790785097","00192790785110","00192790785172","00192790785233","00192790785318","00192790785332","00192790785561","00192790785578","00192790785639","00192790785721","00192790785967","00192790786018","00192790786032","00192790786117","00192790786261","00192790786292","00192790786476","00192790786582","00192790786827","00192790921051","00192790973548","00192790974705","00192790974958","00192790991108","00192790992105","00192790993201","00192790996110","00192820213996","00192820214054","00192820216072","00192820216133","00192820245799","00192820245843","00192820246017","00192820413198","00192820415703","00192820416199","00192820416236","00192820416243","00192820416250","00192820416274","00192820473437","00192820649917","00193517053147","00193517053154","00193517053178","00193517053185","00193517053444","00193517053451","00193517053475","00193517088293","00193517088316","00193517088323","00193517146337","00193517146344","00193517146375","00193517146429","00193517146467","00193517287467","00193517287474","00193517291143","00193517291150","00193517291181","00193517291211","00193517291426","00193517291433","00601842481226","00641300301284","00641300301291","00641300301307","00641300301314","00641300301321","00641300301338","00689228102552","00716736216867","00716736216874","00716736335018","00716736335070","00716736679204","00768686070570","00768686072703","00768686072802","00768686072826","00768686178849","00768686178993","00768686179006","00768686180071","00768686180149","00768686184703","00768686194276","00768686194474","00768686194481","00768686261480","00768686265020","00768686265037","00768686265082","00768686265099","00768686265266","00768686265273","00768686265396","00768686265990","00768686266003","00768686281709","00768686319501","00768686351914","00768686352706","00768686352720","00768686352737","00768686352843","00768686352881","00768686353017","00768686353093","00768686353109","00768686353116","00768686361371","00768686361395","00768686362491","00768686362514","00768686362613","00768686362620","00768686362644","00768686376092","00768686376122","00768686376245","00768686376313","00768686376368","00768686376375","00768686376498","00768686377273","00768686377440","00768686381652","00768686477713","00768686593697","00768686593710","00768686593727","00768686593772","00768686593796","00768686593802","00768686593826","00768686668272","00768686729393","00768686729409","00768686729416","00768686743061","00768686745010","00821973372174","00821973372181","00821973372419","00821973375373","00821973375380","00821973404264","00821973404271","00821973404288","00841269163217","00843990074305","00884065503733","00884065503740","00884065503757","00884603797051","00884603797068","00884603797129","00887202187001","00887202187018","00887202187025","00887202209109","00887202368882","00887202381232","00887537230380","00887537230403","00888818323746","00888818323838","00888818323999","00888818324248","00888818324255","00888818324699","00888818325054","00888818325382","00888818325467","00888818326235","00888818326358","00888818326617","00888818326785","00888818326891","00888818378883","00888818445196","00888818446827","00888818447091","00888818448418","00888818449385","00888818449477","00888818478521","00888818572915","00888818574551","00888818575152","00888818575336","00888818575503","00888818576395","00888818577675","00888818578498","00888818580064","00888818584956","00888818586226","00888818586318","00888818586349","00888818586455","00888818632640","00888818632749","00888818632756","00888818632848","00888818633135","00888818633470","00888818665747","00888818667857","00888818667864","00888818668212","00888818668236","00888818744879","00888818745319","00888818745340","00888818784202","00888818789566","00888818795505","00888818796618","00889143998166","00889143998258","00889143998326","00895428009717","00895428009724","02220000119689","04718905890331","06009699086351","07613017969005","07613017969012","07613017969036","07613017969081","07613017969098","07613017969104","07613017969128","07613017970933","07613019171222","07613019171246","07613019264320","07613019264344","07613019264450","07613019264481","07613019264498","07613019264504","07613019264535","07613019264542","07613019264665","07613019264672","07613019264689","07613019264719","07613019264726","07613019264733","07630053118372","07630053118396","07630053118402","07630053118464","07630053118471","07630053164911","07630053195656","07630053195663","07630053197292","07630472652525","07630472652570","07630472652587","07630472652600","07630472652617","07630472652624","07630472652631","07630472652655","07630472652662","07630472652679","07630472652686","07630472652709","07630472652723","07630472652730","07630472652747","07630472652754","07630472652761","07630472653850","07630472653867","07630472653904","07630472653942","07630472653959","07630472653966","08017732486011","08017732514684","08017732514691","08017732514714","08017732514745","08017732514790","08017732514813","08017732514820","08017732525512","08017732529558","08017732529572","08017732529756","08017732529770","08017732529800","08017732529817","08017732529855","08017732530233","08017732530264","08017732530271","08017732530288","08017732530295","08017732530349","08017732530363","08017732530516","08017732530578","08017732530677","08017732530714","08017732530738","08017732530783","08017732531759","08017732531766","08017732531773","08017732531810","08017732531834","08017732532312","08017732532329","08017732532589","08017732532916","08017732532954","08017732532992","08017732539519","08017732539878","08017732539915","08017732540058","08017732540119","08017732540126","08017732545473","08017732555014","08017732555069","08017732555090","08017732555168","08017732555229","08017732555274","08020838305438","08020838305445","08020838305469","08030819113440","08030819113464","08030819113488","08056153012836","08056153012843","08058364036953","08058364036984","08058364037004","08058364037028","08058364037042","08058364037059","08058364037066","08058364037073","08058364037776","08058364074306","08058364074313","08058364074344","08058364076041","08058364076065","08058364076102","08058364076119","08058364076133","08058364076188","08058364076195","08058364076256","08058364076348","08058364076355","08058364076423","08718568045884","08718568045891","08718568045907","08718568045914","08718568045921","08718568045938","08718568045945","08718568053698","08718568059775","08718568080670","08718568080731","08718568080755","08718568080762","08718568080793","08718568080816","08718568080823","08718568080847","08718568089987","08718568098873","08718568098880","08718568098897","08718568109609","08718568109630","08718568109654","08718568109661","08718568109753","08718568109791","08718568109807","08718568109913","08718568109920","08718568113330","08718568113347","08718568113354","08718568113361","08718568113378","08718568113385","08718568113392","08718568113415","08718568113422","08718568113439","08718568116959","08718568116980","08718568117024","08718568117031","08718568117338","08718568117352","08718568117376","08718568117390","08718568117413","08718568117420","08718568124282"]

ds122522 = ["108441","104981","57780","101703","99225","77456","105137","106103","106103","106103","106438","96321","96321","104959","104959","98034","105946","105946","106368","102520","105352","105483","105126","100916","103716","102152","102152","103975","103975","108442","108443","108394","108394","108395","103950","97274","90483","90483","90483","97764","103945","101967","103946","108445","108445","101928","103948","98429","94166","94165","102235","102235","104719","106617","107463","106832","107366","107366","107366","107366","106646","106646","108440","108440","108472","108472","93266","103466","103466","101917","106680","108470","105096","102560","93278","92282","105134","77343","103649"]


#assigns variables for PYODBC connection to our server
server = 'server'
database = 'brandscycle'
username = 'sa'
password = 'brands6100'
driver= '{ODBC Driver 17 for SQL Server}'

#assigns Spinner() progress bar function to variable "spinner1"
##spinner1 = Spinner()

#assigns PYODBC module connect() function to variable "cxcn" for later connections to the SQL Server 
cnxn = pyodbc.connect('DRIVER='+driver+';PORT=1433;SERVER='+server+';PORT=1443;DATABASE='+database+';UID='+username+';PWD='+ password)

#assigns the function cursor() with the "cxcn" attribute (for PYODBC module connection) to the "cursor" variable (this could be named anything - I will probaly change it in the future so it's not the same name as the function)
cursor = cnxn.cursor()

#applies the function execute() to the variable "cursor" to run SQL statement that iterates through the table and stores it in memory 
cursor.execute("SELECT distinct PROMOTION_ID from reo_current_google_promo") 

os.system('cls') #clears Command Prompt screen
print("---INVENTORY PROMO CODE UPDATER v5.2---1.30.2019")
print("\nThe current promo codes are: ")
print()

#iterates through the variable "cursor" that holds the reo_current_google_promo SQL table and returns results to variable "current_code" - then displays on screen
for row in cursor:
    current_code = row
    print(current_code[0])
cursor.close()
print()

#this assigns file path/name that we downloaded from SE to variable "goog_prod_file" to read later
goog_prod_file = 'C:\APIs and Scripts\MerchantCenter\Brandscycle\Send To Google\WorkFiles\google_products_no_head.txt'

print("\nCopying googlebase data.")
#starts spinning progress bar
##spinner1.start()

#opens and reads google_products_file.txt into variable "googprod" and then read()s that variable it into new variable named "data"
with open(goog_prod_file, 'r' ,errors='ignore') as googprod:
	data = googprod.read()

#cleans out the nulls (\x00) which cause problems later and re-writes google_products_file.txt (at this point in the script - stored as variable "data") to file no_null_goog_prod.txt
data = data.replace('\x00', '')

with open('no_null_goog_prod.txt', 'w') as mynew:
	mynew.write(data)

with open("no_null_goog_prod.txt") as input1: 
	myList = []
	for line in input1:
		myList.append(line.split('\t'))
#print(myList) 
#creates and writes to item_promo.csv
	#then iterates through the entire google_products_file.txt data that has been loaded in to the variable "myList", 
		#checks the contrainst of the if statements and writes the TRUE ones to variable "file1" (which represents item_promo.csv)
with open('item_promo.csv', 'w') as file1:
	for x in myList:
		if (x[2]) not in exclude_vendor and \
			(x[2]) not in enve and \
			(x[6]) not in exclude_category and \
			(x[6]) in general_cat and \
			(x[11])[:5] not in AllEndDisc:
			print(x[11], "Ride12_20231113Brands", sep = ',', file = file1)

		if (x[2]) in Mavic and \
			(x[6]) not in exclude_category and \
			(x[6]) not in shoes_cat and \
			(x[6]) in almost_all and \
			(x[11])[:5] not in AllEndDisc:				
			print(x[11], "Ride12_20231113Brands", sep = ',', file = file1)
			
		if (x[2]) in Keiser and \
			(x[6]) not in exclude_category and \
 			(x[3]) not in m5 and \
			(x[11])[:5] not in AllEndDisc:
			print(x[11], "Keiser_20180302Brands", sep = ',', file = file1)
		
		if (x[2]) in CamelBak and \
			(x[11])[:5] not in AllEndDisc:
			print(x[11], "Camel_20180930Brands", sep = ',', file = file1)
		
		if (x[2]) in CeramicAndSilca and \
			(x[11])[:5] not in AllEndDisc:
			print(x[11], "Speed20_20181004Brands", sep = ',', file = file1)
		
		if (x[2]) in Mavic and \
			(x[6]) not in exclude_category and \
			(x[6]) in shoes_cat and \
			(x[11])[:5] not in AllEndDisc:
			print(x[11], "Mavic30_20180503Brands", sep = ',', file = file1)
		
#		if (x[11])[:6] in enve1 and \
#			(x[11])[:5] not in AllEndDisc:
#			print(x[11], "Melee10_20221202_Take2", sep = ',', file = file1)
#		
		if (x[2]) in quarq and \
			'ShockWiz' not in (x[3]) and \
			(x[11])[:5] not in AllEndDisc:
			print(x[11], "Quarq20_20190306Brands", sep = ',', file = file1)				
		
		if (x[2]) not in exclude_vendor and \
			(x[6]) not in exclude_category and \
			(x[6]) in trainers_cat and \
			(x[11])[:5] not in AllEndDisc:
			print(x[11], "Train12_20231113Brands", sep = ',', file = file1)
		
		if (x[2]) not in exclude_vendor and \
			(x[2]) not in Mavic and \
			(x[6]) not in exclude_category and \
			(x[6]) in shoes_cat and \
			(x[11])[:5] not in OakleyARO and \
			(x[11])[:5] not in Aether and \
			(x[11])[:5] not in AllEndDisc:
			print(x[11], "Access12_20231113Brands", sep = ',', file = file1)
		
		if (x[2]) not in exclude_vendor and \
			(x[6]) not in exclude_category and \
			(x[6]) in clothing_cat and \
			(x[11])[:5] not in AllEndDisc:				
			print(x[11], "Apparel15_20231113Brands", sep = ',', file = file1)
		
		if (x[2]) not in exclude_vendor and \
			(x[6]) not in exclude_category and \
			(x[6]) in wheels_cat and \
			(x[11])[:5] not in AllEndDisc and \
			(x[11])[:5] not in GrandPrix5000:
			print(x[11], "Wheelie10_20231113Brands", sep = ',', file = file1)
		
		if (x[2]) not in exclude_vendor and \
			(x[6]) not in exclude_category and \
			(x[6]) in eyewear_cat and \
			(x[11])[:5] not in AllEndDisc:
			print(x[11], "Sun20_20231113Brands", sep = ',', file = file1)
		
		if (x[2]) in Ortlieb and \
			(x[11])[:5] not in AllEndDisc:
			print(x[11], "Pack25_20180614Brands", sep = ',', file = file1)
				
		if (x[11]) in MTB15 and \
			(x[11])[:5] not in AllEndDisc:
			print(x[11], "MTB15_20180621Brands", sep = ',', file = file1)
		
		if (x[11]) in MTB20 and \
			(x[11])[:5] not in AllEndDisc:
			print(x[11], "MTB20_20180621Brands", sep = ',', file = file1)
		
		if (x[11])[:5] in End20_20180628Brands:
			print(x[11], "End20_20180628Brands", sep = ',', file = file1)
		
		if (x[11])[:5] in End25_20180628Brands:
			print(x[11], "End25_20180628Brands", sep = ',', file = file1)
		
		if (x[11])[:5] in End30_20180628Brands:
			print(x[11], "End30_20180628Brands", sep = ',', file = file1)
		
		if (x[11])[:5] in End40_20180628Brands:
			print(x[11], "End40_20180628Brands", sep = ',', file = file1)
		
		if (x[11])[:5] in End50_20180628Brands:
			print(x[11], "End50_20180628Brands", sep = ',', file = file1)
			
#		if (x[11])[:5] in OakleyARO:
#			print(x[11], "Helm30_20180823", sep = ',', file = file1)
#		
#		if (x[13]) in SRAMSALE and \
#			(x[11])[:5] not in AllEndDisc:
#			print(x[11], "SRAMSALE", sep = ',', file = file1)
#		
#		if (x[13]) in over15 and \
#			(x[11])[:5] not in AllEndDisc:
#			print(x[11], "Over15_20221208Brands", sep = ',', file = file1)
#
#		if (x[13]) in over20 and \
#			(x[11])[:5] not in AllEndDisc:
#			print(x[11], "Over20_20221208Brands", sep = ',', file = file1)
#
		if (x[11])[:5] in ds122522:
			print(x[11], "LetsRide10_20221226Brands", sep = ',', file = file1)
				
#stops the spinning progress bar
##spinner1.stop()
print('Done.\n')
print('Emptying table "REO_Current_Google_Promo"')
##spinner1.start()

#creates new cursor connection and assigns it to variable "cursor", execute()s the SQL statement in quotes and closes the cursor
cursor = cnxn.cursor()
cursor.execute("delete REO_current_google_promo")
cursor.close()

##time.sleep(25)

##spinner1.stop()
print('Done\n')
print('Updating Table "REO_Current_Google_Promo"')
##spinner1.start()

#this loops through the csv file created above and inserts each line into the REO_Current_Google_Promo SQL table
#this is a more complex version of the prior cursor connections because of the csv file write requirements. 
with open ('item_promo.csv', 'r') as f:
    reader = csv.reader(f)
    data = next(reader) 
    query = 'insert into REO_Current_Google_Promo values ({0})'
    query = query.format(','.join('?' * len(data)))
    cursor = cnxn.cursor()
    cursor.execute(query, data)
    for data in reader:
        cursor.execute(query, data)
    cursor.commit()
    cursor.close()

##spinner1.stop()
print('All Done')
time.sleep(3)
